Index: migrations/Version20250424210706.php
===================================================================
diff --git a/migrations/Version20250424210706.php b/migrations/Version20250424210706.php
deleted file mode 100644
--- a/migrations/Version20250424210706.php	(revision b10124d84cbada07620df82f86440dc1f58d4fb1)
+++ /dev/null	(revision b10124d84cbada07620df82f86440dc1f58d4fb1)
@@ -1,35 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace DoctrineMigrations;
-
-use Doctrine\DBAL\Schema\Schema;
-use Doctrine\Migrations\AbstractMigration;
-
-/**
- * Auto-generated Migration: Please modify to your needs!
- */
-final class Version20250424210706 extends AbstractMigration
-{
-    public function getDescription(): string
-    {
-        return '';
-    }
-
-    public function up(Schema $schema): void
-    {
-        // this up() migration is auto-generated, please modify it to your needs
-        $this->addSql(<<<'SQL'
-            ALTER TABLE cours CHANGE description description VARCHAR(255) NOT NULL
-        SQL);
-    }
-
-    public function down(Schema $schema): void
-    {
-        // this down() migration is auto-generated, please modify it to your needs
-        $this->addSql(<<<'SQL'
-            ALTER TABLE cours CHANGE description description VARCHAR(255) DEFAULT NULL
-        SQL);
-    }
-}
Index: public/scripts/add_participant.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>document.addEventListener(\"DOMContentLoaded\", function () {\r\n    console.log(\"\uD83D\uDE80 Script `add_participant.js` charg√© !\");\r\n\r\n    const input = document.querySelector(\"#searchInput\");\r\n    const resultContainer = document.querySelector(\"#autocomplete-results\");\r\n    const form = document.querySelector(\"#participantForm\");\r\n    const hiddenInput = document.querySelector(\"#id_utilisateur\");\r\n    const hiddenCodeCoursInput = document.querySelector(\"#code_cours\");\r\n    const participantList = document.querySelector(\"#participantList\");\r\n\r\n    if (!input || !resultContainer || !form || !hiddenInput || !hiddenCodeCoursInput || !participantList) {\r\n        console.error(\"‚ùå Erreur : Certains √©l√©ments du DOM sont introuvables.\");\r\n        return;\r\n    }\r\n\r\n    input.addEventListener(\"input\", function () {\r\n        let query = input.value.trim();\r\n        console.log(\"\uD83D\uDD0D Requ√™te envoy√©e :\", query);\r\n\r\n        if (query.length > 0) {\r\n            fetch(`/search_students?q=${query}`)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    console.log(\"‚úÖ Donn√©es re√ßues :\", data);\r\n                    resultContainer.innerHTML = \"\";\r\n\r\n                    if (data.length === 0) {\r\n                        resultContainer.innerHTML = \"<div class='autocomplete-item'>Aucun r√©sultat trouv√©</div>\";\r\n                        return;\r\n                    }\r\n\r\n                    data.forEach(utilisateur => {\r\n                        console.log(\"\uD83D\uDC64 Utilisateur trouv√© :\", utilisateur.name);\r\n\r\n                        let div = document.createElement(\"div\");\r\n                        div.textContent = utilisateur.name;\r\n                        div.className = \"autocomplete-item\";\r\n                        div.addEventListener(\"click\", () => {\r\n                            input.value = utilisateur.name;\r\n                            hiddenInput.value = utilisateur.id;\r\n                            resultContainer.innerHTML = \"\";\r\n                        });\r\n\r\n                        resultContainer.appendChild(div);\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    console.error(\"‚ùå Erreur AJAX :\", error);\r\n                    resultContainer.innerHTML = \"<div class='autocomplete-item error'>Erreur de chargement</div>\";\r\n                });\r\n        } else {\r\n            resultContainer.innerHTML = \"\";\r\n        }\r\n    });\r\n\r\n    form.addEventListener(\"submit\", function (event) {\r\n        event.preventDefault();\r\n\r\n        const utilisateurId = hiddenInput.value;\r\n        const coursCode = hiddenCodeCoursInput.value.trim();\r\n\r\n        if (!utilisateurId || !coursCode) {\r\n            alert(\"‚ö†Ô∏è Veuillez s√©lectionner un utilisateur et un cours avant d'ajouter !\");\r\n            return;\r\n        }\r\n\r\n        console.log(\"\uD83D\uDCE4 Donn√©es envoy√©es :\", { id_utilisateur: utilisateurId, code_cours: coursCode });\r\n\r\n        fetch(`/cours/${coursCode}/ajouter-participant`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({ id_utilisateur: utilisateurId, code_cours: coursCode })\r\n        })\r\n            .then(response => {\r\n                console.log(\"\uD83D\uDD0D Statut HTTP :\", response.status);\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                console.log(\"‚úÖ R√©ponse serveur :\", data);\r\n\r\n                if (data.error) {\r\n                    alert(`‚ö†Ô∏è Erreur : ${data.error}`);\r\n                    return;\r\n                }\r\n\r\n                alert(\"\uD83C\uDF89 Utilisateur ajout√© avec succ√®s !\");\r\n                location.reload();\r\n            })\r\n            .catch(error => {\r\n                console.error(\"‚ùå Erreur lors de l'ajout :\", error);\r\n                alert(\"‚ö†Ô∏è Erreur lors de l'ajout du participant.\");\r\n            });\r\n    });\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/public/scripts/add_participant.js b/public/scripts/add_participant.js
--- a/public/scripts/add_participant.js	(revision b10124d84cbada07620df82f86440dc1f58d4fb1)
+++ b/public/scripts/add_participant.js	(date 1745535708371)
@@ -5,10 +5,12 @@
     const resultContainer = document.querySelector("#autocomplete-results");
     const form = document.querySelector("#participantForm");
     const hiddenInput = document.querySelector("#id_utilisateur");
-    const hiddenCodeCoursInput = document.querySelector("#code_cours");
+    const hiddenCoursInput = document.querySelector("#id_cours");
     const participantList = document.querySelector("#participantList");
 
-    if (!input || !resultContainer || !form || !hiddenInput || !hiddenCodeCoursInput || !participantList) {
+
+    // V√©rifier si tous les √©l√©ments existent
+    if (!input || !resultContainer || !form || !hiddenInput || !hiddenCoursInput || !participantList) {
         console.error("‚ùå Erreur : Certains √©l√©ments du DOM sont introuvables.");
         return;
     }
@@ -54,22 +56,24 @@
     });
 
     form.addEventListener("submit", function (event) {
-        event.preventDefault();
+        event.preventDefault(); // Emp√™che le rechargement de la page
 
         const utilisateurId = hiddenInput.value;
-        const coursCode = hiddenCodeCoursInput.value.trim();
+        const coursId = hiddenCoursInput.value.trim();
 
-        if (!utilisateurId || !coursCode) {
+        if (!utilisateurId || !coursId) {
             alert("‚ö†Ô∏è Veuillez s√©lectionner un utilisateur et un cours avant d'ajouter !");
             return;
         }
 
-        console.log("üì§ Donn√©es envoy√©es :", { id_utilisateur: utilisateurId, code_cours: coursCode });
+        console.log("üì§ Donn√©es envoy√©es :", { id_utilisateur: utilisateurId, id_cours: coursId });
 
-        fetch(`/cours/${coursCode}/ajouter-participant`, {
+        fetch(`/cours/cours/ajouter-participant`, {
             method: "POST",
-            headers: { "Content-Type": "application/json" },
-            body: JSON.stringify({ id_utilisateur: utilisateurId, code_cours: coursCode })
+            headers: {
+                "Content-Type": "application/json",
+            },
+            body: JSON.stringify({ id_utilisateur: utilisateurId, id_cours: coursId })
         })
             .then(response => {
                 console.log("üîç Statut HTTP :", response.status);
@@ -84,7 +88,13 @@
                 }
 
                 alert("üéâ Utilisateur ajout√© avec succ√®s !");
-                location.reload();
+
+                let newParticipant = document.createElement("li");
+                newParticipant.textContent = input.value;
+                participantList.appendChild(newParticipant);
+
+                input.value = "";
+                hiddenInput.value = "";
             })
             .catch(error => {
                 console.error("‚ùå Erreur lors de l'ajout :", error);
Index: templates/cours/participants.html.twig
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends 'cours/base_cours.html.twig' %}\r\n\r\n{% set nav = 'participants' %}\r\n\r\n{% block cours_content %}\r\n    <div class=\"add mb-4\">\r\n        <form id=\"participantForm\">\r\n            <input type=\"hidden\" name=\"code_cours\" id=\"code_cours\" value=\"{{ cours.code }}\">\r\n\r\n            <label for=\"searchInput\"><b>Nouveau participant</b></label>\r\n            <input type=\"text\" name=\"etudiant\" placeholder=\"Entrez un nom\" required id=\"searchInput\">\r\n            <input type=\"hidden\" name=\"id_utilisateur\" id=\"id_utilisateur\">\r\n            <div id=\"autocomplete-results\" class=\"autocomplete-results\"></div>\r\n            <button type=\"submit\" class=\"add_button\">Ajouter</button>\r\n        </form>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n            <h2 class=\"mb-3\">√âtudiants</h2>\r\n            <ul id=\"etudiantList\" class=\"list-group\">\r\n                {% for participant in participants %}\r\n                    {% if participant.utilisateur is not null and participant.utilisateur.role != 'prof' %}\r\n                        <li class=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                            <div>\r\n                                <strong>{{ participant.utilisateur.prenom }} {{ participant.utilisateur.nom }}</strong>\r\n                                <a href=\"mailto:{{ participant.utilisateur.email }}\" class=\"ms-2 text-decoration-none\">\r\n                                    \uD83D\uDCE7 {{ participant.utilisateur.email }}\r\n                                </a>\r\n                                {% if participant.utilisateur.id == participant.cours.getResponsableUe() %}\r\n                                    <span class=\"badge bg-warning text-dark ms-2\">Responsable de l'UE</span>\r\n                                {% endif %}\r\n                            </div>\r\n                        </li>\r\n                    {% endif %}\r\n                {% endfor %}\r\n                {% if participants|filter(p => p.utilisateur is not null and p.utilisateur.role != 'prof') is empty %}\r\n                    <li class=\"list-group-item text-center text-muted\">Aucun √©tudiant inscrit</li>\r\n                {% endif %}\r\n            </ul>\r\n        </div>\r\n\r\n        <div class=\"col-md-6\">\r\n            <h2 class=\"mb-3\">Professeurs</h2>\r\n            <ul id=\"profList\" class=\"list-group\">\r\n                {% for participant in participants %}\r\n                    {% if participant.utilisateur is not null and participant.utilisateur.role == 'prof' %}\r\n                        <li class=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                            <div>\r\n                                <strong>{{ participant.utilisateur.prenom }} {{ participant.utilisateur.nom }}</strong>\r\n                                <a href=\"mailto:{{ participant.utilisateur.email }}\" class=\"ms-2 text-decoration-none\">\r\n                                     {{ participant.utilisateur.email }}\r\n                                </a>\r\n                                {% if participant.utilisateur.id == participant.cours.getResponsableUe() %}\r\n                                    <span class=\"badge bg-warning text-dark ms-2\">Responsable de l'UE</span>\r\n                                {% endif %}\r\n                            </div>\r\n                        </li>\r\n                    {% endif %}\r\n                {% endfor %}\r\n                {% if participants|filter(p => p.utilisateur is not null and p.utilisateur.role == 'prof') is empty %}\r\n                    <li class=\"list-group-item text-center text-muted\">Aucun professeur inscrit</li>\r\n                {% endif %}\r\n            </ul>\r\n        </div>\r\n    </div>\r\n{% endblock %}\r\n\r\n{% block cours_scripts %}\r\n    <script src=\"{{ asset('scripts/add_participant.js') }}\"></script>\r\n{% endblock %}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/cours/participants.html.twig b/templates/cours/participants.html.twig
--- a/templates/cours/participants.html.twig	(revision b10124d84cbada07620df82f86440dc1f58d4fb1)
+++ b/templates/cours/participants.html.twig	(date 1745535708367)
@@ -5,7 +5,7 @@
 {% block cours_content %}
     <div class="add mb-4">
         <form id="participantForm">
-            <input type="hidden" name="code_cours" id="code_cours" value="{{ cours.code }}">
+            <input type="hidden" name="id_cours" id="id_cours" value="{{ cours.id }}">
 
             <label for="searchInput"><b>Nouveau participant</b></label>
             <input type="text" name="etudiant" placeholder="Entrez un nom" required id="searchInput">
Index: src/Controller/CoursController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Controller;\r\n\r\nuse App\\Entity\\Utilisateur;\r\nuse App\\Entity\\Participant;\r\nuse App\\Entity\\Cours;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\nuse Doctrine\\ORM\\EntityManagerInterface;\r\n\r\nclass CoursController extends AbstractController\r\n{\r\n    #[Route('/cours/{code}', name: 'cours_par_code')]\r\n    public function cours(string $code, EntityManagerInterface $entityManager): Response\r\n    {\r\n        $cours = $entityManager->getRepository(Cours::class)->findOneBy(['code' => $code]);\r\n\r\n        if (!$cours) {\r\n            throw $this->createNotFoundException('Cours non trouv√©');\r\n        }\r\n\r\n        return $this->render('cours/cours.html.twig', [\r\n            'cours' => $cours,\r\n            'nav' => 'cours',\r\n        ]);\r\n    }\r\n    #[Route('/cours/{code}/notes', name: 'cours_notes')]\r\n    public function notes(string $code, EntityManagerInterface $em): Response\r\n    {\r\n        $cours = $em->getRepository(Cours::class)->findOneBy(['code' => $code]);\r\n\r\n        if (!$cours) {\r\n            throw $this->createNotFoundException('Cours non trouv√©');\r\n        }\r\n\r\n        return $this->render('cours/notes.html.twig', [\r\n            'cours' => $cours,\r\n            'nav' => 'notes',\r\n        ]);\r\n    }\r\n\r\n    #[Route('/cours/{code}/notes/ajouter', name: 'ajouter_note')]\r\n    public function ajouterNote(string $code, EntityManagerInterface $em): Response\r\n    {\r\n        $cours = $em->getRepository(Cours::class)->findOneBy(['code' => $code]);\r\n\r\n        if (!$cours) {\r\n            throw $this->createNotFoundException('Cours non trouv√©');\r\n        }\r\n\r\n        return $this->render('cours/ajouter_note.html.twig', [\r\n            'cours' => $cours,\r\n        ]);\r\n    }\r\n\r\n    #[Route('/cours/{code}/participants', name: 'cours_participants')]\r\n    public function participants(string $code, EntityManagerInterface $entityManager): Response\r\n    {\r\n        $cours = $entityManager->getRepository(Cours::class)->findOneBy(['code' => $code]);\r\n\r\n        if (!$cours) {\r\n            throw $this->createNotFoundException('Cours non trouv√©');\r\n        }\r\n\r\n        $participants = $entityManager->getRepository(Participant::class)->findBy(['cours' => $cours]);\r\n\r\n        return $this->render('cours/participants.html.twig', [\r\n            'participants' => $participants,\r\n            'cours' => $cours,\r\n            'nav' => 'participants'\r\n        ]);\r\n    }\r\n\r\n    #[Route('/search_students', name: 'search_students', methods: ['GET'])]\r\n    public function searchStudents(Request $request, EntityManagerInterface $entityManager): JsonResponse\r\n    {\r\n        $query = trim($request->query->get('q', ''));\r\n\r\n        if (empty($query)) {\r\n            return new JsonResponse([], JsonResponse::HTTP_OK);\r\n        }\r\n\r\n        try {\r\n            $students = $entityManager->getRepository(Utilisateur::class)\r\n                ->createQueryBuilder('u')\r\n                ->where('LOWER(u.nom) LIKE LOWER(:query) OR LOWER(u.prenom) LIKE LOWER(:query)')\r\n                ->setParameter('query', '%' . $query . '%')\r\n                ->setMaxResults(10)\r\n                ->getQuery()\r\n                ->getResult();\r\n\r\n            return new JsonResponse(array_map(fn($s) => [\r\n                'id' => $s->getId(),\r\n                'name' => \"{$s->getPrenom()} {$s->getNom()}\",\r\n            ], $students), JsonResponse::HTTP_OK);\r\n        } catch (\\Exception $e) {\r\n            return new JsonResponse(['error' => $e->getMessage()], JsonResponse::HTTP_INTERNAL_SERVER_ERROR);\r\n        }\r\n    }\r\n\r\n    #[Route('/cours/{code}/ajouter-participant', name: 'ajouter_participant', methods: ['POST'])]\r\n    public function ajouterParticipant(string $code, Request $request, EntityManagerInterface $entityManager): JsonResponse\r\n    {\r\n        $cours = $entityManager->getRepository(Cours::class)->findOneBy(['code' => $code]);\r\n\r\n        if (!$cours) {\r\n            return new JsonResponse([\"error\" => \"Cours introuvable\"], JsonResponse::HTTP_NOT_FOUND);\r\n        }\r\n\r\n        $data = json_decode($request->getContent(), true);\r\n\r\n        if (!isset($data['id_utilisateur']) || empty($data['id_utilisateur'])) {\r\n            return new JsonResponse([\"error\" => \"ID utilisateur manquant\"], JsonResponse::HTTP_BAD_REQUEST);\r\n        }\r\n\r\n        $utilisateur = $entityManager->getRepository(Utilisateur::class)->find($data['id_utilisateur']);\r\n\r\n        if (!$utilisateur) {\r\n            return new JsonResponse([\"error\" => \"Utilisateur introuvable\"], JsonResponse::HTTP_NOT_FOUND);\r\n        }\r\n\r\n        if ($entityManager->getRepository(Participant::class)->findOneBy(['utilisateur' => $utilisateur, 'cours' => $cours])) {\r\n            return new JsonResponse([\"error\" => \"Utilisateur d√©j√† inscrit\"], JsonResponse::HTTP_CONFLICT);\r\n        }\r\n\r\n        $participant = new Participant();\r\n        $participant->setUtilisateur($utilisateur);\r\n        $participant->setCours($cours);\r\n        $entityManager->persist($participant);\r\n        $entityManager->flush();\r\n\r\n        return new JsonResponse(['success' => 'Utilisateur ajout√© avec succ√®s'], JsonResponse::HTTP_OK);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Controller/CoursController.php b/src/Controller/CoursController.php
--- a/src/Controller/CoursController.php	(revision b10124d84cbada07620df82f86440dc1f58d4fb1)
+++ b/src/Controller/CoursController.php	(date 1745535709573)
@@ -15,9 +15,9 @@
 class CoursController extends AbstractController
 {
     #[Route('/cours/{code}', name: 'cours_par_code')]
-    public function cours(string $code, EntityManagerInterface $entityManager): Response
+    public function cours(string $code, EntityManagerInterface $em): Response
     {
-        $cours = $entityManager->getRepository(Cours::class)->findOneBy(['code' => $code]);
+        $cours = $em->getRepository(Cours::class)->findOneBy(['code' => $code]);
 
         if (!$cours) {
             throw $this->createNotFoundException('Cours non trouv√©');
@@ -28,6 +28,7 @@
             'nav' => 'cours',
         ]);
     }
+
     #[Route('/cours/{code}/notes', name: 'cours_notes')]
     public function notes(string $code, EntityManagerInterface $em): Response
     {
@@ -78,16 +79,16 @@
     #[Route('/search_students', name: 'search_students', methods: ['GET'])]
     public function searchStudents(Request $request, EntityManagerInterface $entityManager): JsonResponse
     {
-        $query = trim($request->query->get('q', ''));
+        $query = $request->query->get('q');
 
-        if (empty($query)) {
+        if (!$query) {
             return new JsonResponse([], JsonResponse::HTTP_OK);
         }
 
         try {
             $students = $entityManager->getRepository(Utilisateur::class)
                 ->createQueryBuilder('u')
-                ->where('LOWER(u.nom) LIKE LOWER(:query) OR LOWER(u.prenom) LIKE LOWER(:query)')
+                ->where('u.nom LIKE :query OR u.prenom LIKE :query')
                 ->setParameter('query', '%' . $query . '%')
                 ->setMaxResults(10)
                 ->getQuery()
@@ -95,7 +96,7 @@
 
             return new JsonResponse(array_map(fn($s) => [
                 'id' => $s->getId(),
-                'name' => "{$s->getPrenom()} {$s->getNom()}",
+                'name' => $s->getPrenom() . ' ' . $s->getNom(),
             ], $students), JsonResponse::HTTP_OK);
         } catch (\Exception $e) {
             return new JsonResponse(['error' => $e->getMessage()], JsonResponse::HTTP_INTERNAL_SERVER_ERROR);
@@ -106,24 +107,27 @@
     public function ajouterParticipant(string $code, Request $request, EntityManagerInterface $entityManager): JsonResponse
     {
         $cours = $entityManager->getRepository(Cours::class)->findOneBy(['code' => $code]);
-
         if (!$cours) {
             return new JsonResponse(["error" => "Cours introuvable"], JsonResponse::HTTP_NOT_FOUND);
         }
 
         $data = json_decode($request->getContent(), true);
+        $userId = $data['id_utilisateur'] ?? null;
 
-        if (!isset($data['id_utilisateur']) || empty($data['id_utilisateur'])) {
+        if (!$userId) {
             return new JsonResponse(["error" => "ID utilisateur manquant"], JsonResponse::HTTP_BAD_REQUEST);
         }
 
-        $utilisateur = $entityManager->getRepository(Utilisateur::class)->find($data['id_utilisateur']);
+        $utilisateur = $entityManager->getRepository(Utilisateur::class)->find($userId);
 
         if (!$utilisateur) {
             return new JsonResponse(["error" => "Utilisateur introuvable"], JsonResponse::HTTP_NOT_FOUND);
         }
 
-        if ($entityManager->getRepository(Participant::class)->findOneBy(['utilisateur' => $utilisateur, 'cours' => $cours])) {
+        $existingParticipant = $entityManager->getRepository(Participant::class)
+            ->findOneBy(['utilisateur' => $utilisateur, 'cours' => $cours]);
+
+        if ($existingParticipant) {
             return new JsonResponse(["error" => "Utilisateur d√©j√† inscrit"], JsonResponse::HTTP_CONFLICT);
         }
 
@@ -133,6 +137,20 @@
         $entityManager->persist($participant);
         $entityManager->flush();
 
-        return new JsonResponse(['success' => 'Utilisateur ajout√© avec succ√®s'], JsonResponse::HTTP_OK);
+        return new JsonResponse(["success" => "Utilisateur ajout√© avec succ√®s"], JsonResponse::HTTP_OK);
+    }
+
+    #[Route('/cours/{code}/ajouter-participant-page', name: 'new_participant')]
+    public function afficherFormulaireAjout(string $code, EntityManagerInterface $entityManager): Response
+    {
+        $cours = $entityManager->getRepository(Cours::class)->findOneBy(['code' => $code]);
+
+        if (!$cours) {
+            return new Response("Erreur : Aucun cours trouv√©", Response::HTTP_NOT_FOUND);
+        }
+
+        return $this->render('cours/ajouter_participant.html.twig', [
+            'cours' => $cours,
+        ]);
     }
 }
Index: src/Controller/MesCoursController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Controller;\r\n\r\nuse App\\Entity\\Cours;\r\nuse Doctrine\\ORM\\EntityManagerInterface;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\n\r\nclass MesCoursController extends AbstractController\r\n{\r\n    #[Route('/mes-cours', name: 'mes_cours')]\r\n    public function index(EntityManagerInterface $em): Response\r\n    {\r\n        $cours = $em->getRepository(Cours::class)->findAll();\r\n\r\n        return $this->render('mes_cours.html.twig', [\r\n            'cours_list' => $cours\r\n        ]);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Controller/MesCoursController.php b/src/Controller/MesCoursController.php
--- a/src/Controller/MesCoursController.php	(revision b10124d84cbada07620df82f86440dc1f58d4fb1)
+++ b/src/Controller/MesCoursController.php	(date 1745535709573)
@@ -15,6 +15,14 @@
     {
         $cours = $em->getRepository(Cours::class)->findAll();
 
+        foreach ($cours as $ue) {
+            if ($ue->getImage()) {
+                $ue->setImageUrl($this->generateUrl('cours_image', ['id' => $ue->getId()]));
+            } else {
+                $ue->setImageUrl('https://www.pokepedia.fr/images/thumb/3/31/Lugulabre_de_Chammal.png/300px-Lugulabre_de_Chammal.png');
+            }
+        }
+
         return $this->render('mes_cours.html.twig', [
             'cours_list' => $cours
         ]);
Index: src/Entity/Participant.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Entity;\r\n\r\nuse App\\Repository\\ParticipantRepository;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse App\\Entity\\Utilisateur;\r\nuse App\\Entity\\Cours;\r\n\r\n#[ORM\\Entity(repositoryClass: ParticipantRepository::class)]\r\nclass Participant\r\n{\r\n    #[ORM\\Id]\r\n    #[ORM\\GeneratedValue]\r\n    #[ORM\\Column]\r\n    private ?int $id = null;\r\n\r\n    #[ORM\\ManyToOne(targetEntity: Utilisateur::class)]\r\n    #[ORM\\JoinColumn(name: \"id_utilisateur\", referencedColumnName: \"id\", onDelete: \"CASCADE\")]\r\n    private ?Utilisateur $utilisateur = null;\r\n\r\n    #[ORM\\ManyToOne(targetEntity: Cours::class)]\r\n    #[ORM\\JoinColumn(name: \"code_cours\", referencedColumnName: \"code\", onDelete: \"CASCADE\")] // \uD83D\uDD25 Corrig√© pour pointer vers `code`\r\n    private ?Cours $cours = null;\r\n\r\n    public function getId(): ?int\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    public function getUtilisateur(): ?Utilisateur\r\n    {\r\n        return $this->utilisateur;\r\n    }\r\n\r\n    public function setUtilisateur(Utilisateur $utilisateur): static\r\n    {\r\n        $this->utilisateur = $utilisateur;\r\n        return $this;\r\n    }\r\n\r\n    public function getCours(): ?Cours\r\n    {\r\n        return $this->cours;\r\n    }\r\n\r\n    public function setCours(Cours $cours): static\r\n    {\r\n        $this->cours = $cours;\r\n        return $this;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Entity/Participant.php b/src/Entity/Participant.php
--- a/src/Entity/Participant.php	(revision b10124d84cbada07620df82f86440dc1f58d4fb1)
+++ b/src/Entity/Participant.php	(date 1745535709589)
@@ -17,17 +17,18 @@
 
     #[ORM\ManyToOne(targetEntity: Utilisateur::class)]
     #[ORM\JoinColumn(name: "id_utilisateur", referencedColumnName: "id", onDelete: "CASCADE")]
-    private ?Utilisateur $utilisateur = null;
+    private ?Utilisateur $utilisateur = null;  // üî• Correction de la relation
 
     #[ORM\ManyToOne(targetEntity: Cours::class)]
-    #[ORM\JoinColumn(name: "code_cours", referencedColumnName: "code", onDelete: "CASCADE")] // üî• Corrig√© pour pointer vers `code`
-    private ?Cours $cours = null;
+    #[ORM\JoinColumn(name: "id_cours", referencedColumnName: "id", onDelete: "CASCADE")]
+    private ?Cours $cours = null;  // üî• Correction de la relation
 
     public function getId(): ?int
     {
         return $this->id;
     }
 
+    // ‚úÖ Getter et setter pour `Utilisateur`
     public function getUtilisateur(): ?Utilisateur
     {
         return $this->utilisateur;
@@ -39,6 +40,7 @@
         return $this;
     }
 
+    // ‚úÖ Getter et setter pour `Cours`
     public function getCours(): ?Cours
     {
         return $this->cours;
Index: src/Entity/Cours.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Entity;\r\n\r\nuse App\\Repository\\CoursRepository;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\n\r\n#[ORM\\Entity(repositoryClass: CoursRepository::class)]\r\nclass Cours\r\n{\r\n    #[ORM\\Id]\r\n    #[ORM\\Column(length: 4)]\r\n    private ?string $code = null;  // \uD83D\uDD25 Code devient la cl√© primaire\r\n\r\n    #[ORM\\Column(length: 255)]\r\n    private ?string $nom = null;\r\n\r\n    #[ORM\\Column(length: 255)]\r\n    private ?string $description = null;\r\n\r\n    #[ORM\\Column(nullable: true)]\r\n    private ?string $image = null;\r\n\r\n    #[ORM\\Column]\r\n    private ?int $responsable_ue = null;\r\n\r\n    public function getCode(): ?string\r\n    {\r\n        return $this->code;\r\n    }\r\n\r\n    public function setCode(string $code): static\r\n    {\r\n        $this->code = $code;\r\n        return $this;\r\n    }\r\n\r\n    public function getNom(): ?string\r\n    {\r\n        return $this->nom;\r\n    }\r\n\r\n    public function setNom(string $nom): static\r\n    {\r\n        $this->nom = $nom;\r\n        return $this;\r\n    }\r\n\r\n    public function getDescription(): ?string\r\n    {\r\n        return $this->description;\r\n    }\r\n\r\n    public function setDescription(?string $description): static\r\n    {\r\n        $this->description = $description;\r\n        return $this;\r\n    }\r\n\r\n    public function getImage(): ?string\r\n    {\r\n        return $this->image;\r\n    }\r\n\r\n    public function setImage(?string $image): static\r\n    {\r\n        $this->image = $image;\r\n        return $this;\r\n    }\r\n\r\n    public function getResponsableUe(): ?int\r\n    {\r\n        return $this->responsable_ue;\r\n    }\r\n\r\n    public function setResponsableUe(int $responsable_ue): static\r\n    {\r\n        $this->responsable_ue = $responsable_ue;\r\n        return $this;\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Entity/Cours.php b/src/Entity/Cours.php
--- a/src/Entity/Cours.php	(revision b10124d84cbada07620df82f86440dc1f58d4fb1)
+++ b/src/Entity/Cours.php	(date 1745535709589)
@@ -3,35 +3,40 @@
 namespace App\Entity;
 
 use App\Repository\CoursRepository;
+use Doctrine\DBAL\Types\Types;
 use Doctrine\ORM\Mapping as ORM;
 
 #[ORM\Entity(repositoryClass: CoursRepository::class)]
 class Cours
 {
     #[ORM\Id]
-    #[ORM\Column(length: 4)]
-    private ?string $code = null;  // üî• Code devient la cl√© primaire
+    #[ORM\GeneratedValue]
+    #[ORM\Column]
+    private ?int $id = null;
 
     #[ORM\Column(length: 255)]
     private ?string $nom = null;
 
+    #[ORM\Column(length: 4)]
+    private ?string $code = null;
+
     #[ORM\Column(length: 255)]
     private ?string $description = null;
 
-    #[ORM\Column(nullable: true)]
-    private ?string $image = null;
+    #[ORM\Column(type: Types::BLOB, nullable: true)]
+    private $image;
 
     #[ORM\Column]
     private ?int $responsable_ue = null;
 
-    public function getCode(): ?string
+    public function getId(): ?int
     {
-        return $this->code;
+        return $this->id;
     }
 
-    public function setCode(string $code): static
+    public function setId(int $id): static
     {
-        $this->code = $code;
+        $this->id = $id;
         return $this;
     }
 
@@ -43,6 +48,19 @@
     public function setNom(string $nom): static
     {
         $this->nom = $nom;
+
+        return $this;
+    }
+
+    public function getCode(): ?string
+    {
+        return $this->code;
+    }
+
+    public function setCode(string $code): static
+    {
+        $this->code = $code;
+
         return $this;
     }
 
@@ -54,17 +72,19 @@
     public function setDescription(?string $description): static
     {
         $this->description = $description;
+
         return $this;
     }
 
-    public function getImage(): ?string
+    public function getImage()
     {
         return $this->image;
     }
 
-    public function setImage(?string $image): static
+    public function setImage($image): static
     {
         $this->image = $image;
+
         return $this;
     }
 
@@ -76,6 +96,7 @@
     public function setResponsableUe(int $responsable_ue): static
     {
         $this->responsable_ue = $responsable_ue;
+
         return $this;
     }
 }
